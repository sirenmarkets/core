// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AmmDataProviderCreated extends ethereum.Event {
  get params(): AmmDataProviderCreated__Params {
    return new AmmDataProviderCreated__Params(this);
  }
}

export class AmmDataProviderCreated__Params {
  _event: AmmDataProviderCreated;

  constructor(event: AmmDataProviderCreated) {
    this._event = event;
  }

  get seriesController(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get erc1155Controller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get addressesProvider(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AmmDataProvider__getVirtualReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class AmmDataProvider extends ethereum.SmartContract {
  static bind(address: Address): AmmDataProvider {
    return new AmmDataProvider("AmmDataProvider", address);
  }

  addressesProvider(): Address {
    let result = super.call(
      "addressesProvider",
      "addressesProvider():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_addressesProvider(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressesProvider",
      "addressesProvider():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bTokenGetCollateralIn(
    seriesId: BigInt,
    ammAddress: Address,
    bTokenAmount: BigInt,
    collateralTokenBalance: BigInt,
    bTokenPrice: BigInt
  ): BigInt {
    let result = super.call(
      "bTokenGetCollateralIn",
      "bTokenGetCollateralIn(uint64,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(bTokenAmount),
        ethereum.Value.fromUnsignedBigInt(collateralTokenBalance),
        ethereum.Value.fromUnsignedBigInt(bTokenPrice)
      ]
    );

    return result[0].toBigInt();
  }

  try_bTokenGetCollateralIn(
    seriesId: BigInt,
    ammAddress: Address,
    bTokenAmount: BigInt,
    collateralTokenBalance: BigInt,
    bTokenPrice: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bTokenGetCollateralIn",
      "bTokenGetCollateralIn(uint64,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(bTokenAmount),
        ethereum.Value.fromUnsignedBigInt(collateralTokenBalance),
        ethereum.Value.fromUnsignedBigInt(bTokenPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bTokenGetCollateralInView(
    ammAddress: Address,
    seriesId: BigInt,
    bTokenAmount: BigInt
  ): BigInt {
    let result = super.call(
      "bTokenGetCollateralInView",
      "bTokenGetCollateralInView(address,uint64,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromUnsignedBigInt(bTokenAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_bTokenGetCollateralInView(
    ammAddress: Address,
    seriesId: BigInt,
    bTokenAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bTokenGetCollateralInView",
      "bTokenGetCollateralInView(address,uint64,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromUnsignedBigInt(bTokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bTokenGetCollateralOutView(
    ammAddress: Address,
    seriesId: BigInt,
    bTokenAmount: BigInt
  ): BigInt {
    let result = super.call(
      "bTokenGetCollateralOutView",
      "bTokenGetCollateralOutView(address,uint64,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromUnsignedBigInt(bTokenAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_bTokenGetCollateralOutView(
    ammAddress: Address,
    seriesId: BigInt,
    bTokenAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bTokenGetCollateralOutView",
      "bTokenGetCollateralOutView(address,uint64,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromUnsignedBigInt(bTokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc1155Controller(): Address {
    let result = super.call(
      "erc1155Controller",
      "erc1155Controller():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_erc1155Controller(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "erc1155Controller",
      "erc1155Controller():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollateralValueOfAllExpiredOptionTokens(
    openSeries: Array<BigInt>,
    ammAddress: Address
  ): BigInt {
    let result = super.call(
      "getCollateralValueOfAllExpiredOptionTokens",
      "getCollateralValueOfAllExpiredOptionTokens(uint64[],address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(openSeries),
        ethereum.Value.fromAddress(ammAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCollateralValueOfAllExpiredOptionTokens(
    openSeries: Array<BigInt>,
    ammAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralValueOfAllExpiredOptionTokens",
      "getCollateralValueOfAllExpiredOptionTokens(uint64[],address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigIntArray(openSeries),
        ethereum.Value.fromAddress(ammAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralValueOfAllExpiredOptionTokensView(ammAddress: Address): BigInt {
    let result = super.call(
      "getCollateralValueOfAllExpiredOptionTokensView",
      "getCollateralValueOfAllExpiredOptionTokensView(address):(uint256)",
      [ethereum.Value.fromAddress(ammAddress)]
    );

    return result[0].toBigInt();
  }

  try_getCollateralValueOfAllExpiredOptionTokensView(
    ammAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralValueOfAllExpiredOptionTokensView",
      "getCollateralValueOfAllExpiredOptionTokensView(address):(uint256)",
      [ethereum.Value.fromAddress(ammAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOptionTokensSaleValue(
    lpTokenAmount: BigInt,
    lpTokenSupply: BigInt,
    openSeries: Array<BigInt>,
    ammAddress: Address,
    collateralTokenBalance: BigInt,
    impliedVolatility: BigInt
  ): BigInt {
    let result = super.call(
      "getOptionTokensSaleValue",
      "getOptionTokensSaleValue(uint256,uint256,uint64[],address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount),
        ethereum.Value.fromUnsignedBigInt(lpTokenSupply),
        ethereum.Value.fromUnsignedBigIntArray(openSeries),
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(collateralTokenBalance),
        ethereum.Value.fromUnsignedBigInt(impliedVolatility)
      ]
    );

    return result[0].toBigInt();
  }

  try_getOptionTokensSaleValue(
    lpTokenAmount: BigInt,
    lpTokenSupply: BigInt,
    openSeries: Array<BigInt>,
    ammAddress: Address,
    collateralTokenBalance: BigInt,
    impliedVolatility: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOptionTokensSaleValue",
      "getOptionTokensSaleValue(uint256,uint256,uint64[],address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount),
        ethereum.Value.fromUnsignedBigInt(lpTokenSupply),
        ethereum.Value.fromUnsignedBigIntArray(openSeries),
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(collateralTokenBalance),
        ethereum.Value.fromUnsignedBigInt(impliedVolatility)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOptionTokensSaleValueView(
    ammAddress: Address,
    lpTokenAmount: BigInt
  ): BigInt {
    let result = super.call(
      "getOptionTokensSaleValueView",
      "getOptionTokensSaleValueView(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getOptionTokensSaleValueView(
    ammAddress: Address,
    lpTokenAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOptionTokensSaleValueView",
      "getOptionTokensSaleValueView(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(lpTokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPriceForSeries(seriesId: BigInt, annualVolatility: BigInt): BigInt {
    let result = super.call(
      "getPriceForSeries",
      "getPriceForSeries(uint64,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromUnsignedBigInt(annualVolatility)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPriceForSeries(
    seriesId: BigInt,
    annualVolatility: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPriceForSeries",
      "getPriceForSeries(uint64,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromUnsignedBigInt(annualVolatility)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedeemableCollateral(seriesId: BigInt, wTokenBalance: BigInt): BigInt {
    let result = super.call(
      "getRedeemableCollateral",
      "getRedeemableCollateral(uint64,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromUnsignedBigInt(wTokenBalance)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRedeemableCollateral(
    seriesId: BigInt,
    wTokenBalance: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedeemableCollateral",
      "getRedeemableCollateral(uint64,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromUnsignedBigInt(wTokenBalance)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalPoolValue(
    includeUnclaimed: boolean,
    openSeries: Array<BigInt>,
    collateralBalance: BigInt,
    ammAddress: Address,
    impliedVolatility: BigInt
  ): BigInt {
    let result = super.call(
      "getTotalPoolValue",
      "getTotalPoolValue(bool,uint64[],uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromBoolean(includeUnclaimed),
        ethereum.Value.fromUnsignedBigIntArray(openSeries),
        ethereum.Value.fromUnsignedBigInt(collateralBalance),
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(impliedVolatility)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalPoolValue(
    includeUnclaimed: boolean,
    openSeries: Array<BigInt>,
    collateralBalance: BigInt,
    ammAddress: Address,
    impliedVolatility: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalPoolValue",
      "getTotalPoolValue(bool,uint64[],uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromBoolean(includeUnclaimed),
        ethereum.Value.fromUnsignedBigIntArray(openSeries),
        ethereum.Value.fromUnsignedBigInt(collateralBalance),
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(impliedVolatility)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalPoolValueView(
    ammAddress: Address,
    includeUnclaimed: boolean
  ): BigInt {
    let result = super.call(
      "getTotalPoolValueView",
      "getTotalPoolValueView(address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromBoolean(includeUnclaimed)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalPoolValueView(
    ammAddress: Address,
    includeUnclaimed: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalPoolValueView",
      "getTotalPoolValueView(address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromBoolean(includeUnclaimed)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVirtualReserves(
    seriesId: BigInt,
    ammAddress: Address,
    collateralTokenBalance: BigInt,
    bTokenPrice: BigInt
  ): AmmDataProvider__getVirtualReservesResult {
    let result = super.call(
      "getVirtualReserves",
      "getVirtualReserves(uint64,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(collateralTokenBalance),
        ethereum.Value.fromUnsignedBigInt(bTokenPrice)
      ]
    );

    return new AmmDataProvider__getVirtualReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getVirtualReserves(
    seriesId: BigInt,
    ammAddress: Address,
    collateralTokenBalance: BigInt,
    bTokenPrice: BigInt
  ): ethereum.CallResult<AmmDataProvider__getVirtualReservesResult> {
    let result = super.tryCall(
      "getVirtualReserves",
      "getVirtualReserves(uint64,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(collateralTokenBalance),
        ethereum.Value.fromUnsignedBigInt(bTokenPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AmmDataProvider__getVirtualReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  optionTokenGetCollateralOut(
    seriesId: BigInt,
    ammAddress: Address,
    optionTokenAmount: BigInt,
    collateralTokenBalance: BigInt,
    bTokenPrice: BigInt,
    isBToken: boolean
  ): BigInt {
    let result = super.call(
      "optionTokenGetCollateralOut",
      "optionTokenGetCollateralOut(uint64,address,uint256,uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(optionTokenAmount),
        ethereum.Value.fromUnsignedBigInt(collateralTokenBalance),
        ethereum.Value.fromUnsignedBigInt(bTokenPrice),
        ethereum.Value.fromBoolean(isBToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_optionTokenGetCollateralOut(
    seriesId: BigInt,
    ammAddress: Address,
    optionTokenAmount: BigInt,
    collateralTokenBalance: BigInt,
    bTokenPrice: BigInt,
    isBToken: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "optionTokenGetCollateralOut",
      "optionTokenGetCollateralOut(uint64,address,uint256,uint256,uint256,bool):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(optionTokenAmount),
        ethereum.Value.fromUnsignedBigInt(collateralTokenBalance),
        ethereum.Value.fromUnsignedBigInt(bTokenPrice),
        ethereum.Value.fromBoolean(isBToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seriesController(): Address {
    let result = super.call(
      "seriesController",
      "seriesController():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_seriesController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "seriesController",
      "seriesController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wTokenGetCollateralOutView(
    ammAddress: Address,
    seriesId: BigInt,
    wTokenAmount: BigInt
  ): BigInt {
    let result = super.call(
      "wTokenGetCollateralOutView",
      "wTokenGetCollateralOutView(address,uint64,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromUnsignedBigInt(wTokenAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_wTokenGetCollateralOutView(
    ammAddress: Address,
    seriesId: BigInt,
    wTokenAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "wTokenGetCollateralOutView",
      "wTokenGetCollateralOutView(address,uint64,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(ammAddress),
        ethereum.Value.fromUnsignedBigInt(seriesId),
        ethereum.Value.fromUnsignedBigInt(wTokenAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _seriesController(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _erc1155Controller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _addressProvider(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
